function convertColorToWhite(imageData, targetColor) {
    const data = imageData.data;
    const targetColorRGB = hexToRGB(targetColor);

    for (let i = 0; i < data.length; i += 4) {
        if (data[i] === targetColorRGB.r &&
            data[i + 1] === targetColorRGB.g &&
            data[i + 2] === targetColorRGB.b) {
            data[i] = 255;     // Red
            data[i + 1] = 255; // Green
            data[i + 2] = 255; // Blue
        }
    }
    return imageData;
}

function convertToBlackAndWhite(imageData) {
    const data = imageData.data;

    for (let i = 0; i < data.length; i += 4) {
        const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
        data[i] = avg;     // Red
        data[i + 1] = avg; // Green
        data[i + 2] = avg; // Blue
    }

    return imageData;
}

function hexToRGB(hex) {
    let r = 0, g = 0, b = 0;

    if (hex.length === 7) {
        r = parseInt(hex.slice(1, 3), 16);
        g = parseInt(hex.slice(3, 5), 16);
        b = parseInt(hex.slice(5, 7), 16);
    }

    return { r, g, b };
}

function cleanAndValidateText(text) {
    const tt = text.replace(/ /g, '');
    const cleanedText = tt.replace(/[^0-9\-+]/g, '').trim();
    return cleanedText.length > 0 ? cleanedText : null;
}

function evaluateMathExpression(expression) {
    try {
        return eval(expression);
    } catch (e) {
        console.error('Math error:', e);
        return null;
    }
}

function setRetryDelay(minDelay = 750, maxDelay = 2500) {
    return Math.floor(Math.random() * (maxDelay - minDelay + 1)) + minDelay;
}

function retryOrReload(retryCount, buttonId, retryFunction) {
    const delay = setRetryDelay(); // Get random delay
    if (retryCount < 75) { // Adjust retry limit as needed
        console.log('Retrying CAPTCHA recognition...');
        if (retryCount % 3 === 0) {
            window.location.reload();
        } else {
            document.getElementById(buttonId).click();
        }
        setTimeout(() => retryFunction(retryCount + 1), delay);
    } else {
        console.error('Failed to recognize CAPTCHA after several attempts.');
    }
}

function processCaptchaForShipOnlineUserlogin(retryCount = 0) {
    if (typeof window.Tesseract === 'undefined') {
        console.error('Tesseract.js is not loaded.');
        return;
    }

    const captchaImage = document.getElementById('ContentPlaceHolder1_imgCaptcha');
    const securityCodeInput = document.querySelector('input[id="ContentPlaceHolder1_txtCaptchaAnswer"]');

    if (!captchaImage || !securityCodeInput) {
        console.error('CAPTCHA image or security code input field not found.');
        return;
    }

    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');

    canvas.width = captchaImage.width || 100;
    canvas.height = captchaImage.height || 100;

    context.drawImage(captchaImage, 0, 0);
    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
    const bwImageData = convertToBlackAndWhite(imageData);
    context.putImageData(bwImageData, 0, 0);
    const dataURL = canvas.toDataURL('image/png');

    window.Tesseract.recognize(dataURL, 'eng', {
        logger: info => console.log('OCR Progress:', info)
    })
    .then(({ data: { text } }) => {
        const cleanedText = cleanAndValidateText(text);
        if (cleanedText) {
            const result = evaluateMathExpression(cleanedText);
            if (result !== null) {
                securityCodeInput.value = result;
                document.getElementById('ContentPlaceHolder1_btnLogin1').click();
            } else {
                retryOrReload(retryCount, 'ContentPlaceHolder1_ImageButton1', processCaptchaForShipOnlineUserlogin);
            }
        } else {
            retryOrReload(retryCount, 'ContentPlaceHolder1_ImageButton1', processCaptchaForShipOnlineUserlogin);
        }
    })
    .catch(error => {
        console.error('OCR Error:', error);
        retryOrReload(retryCount, 'ContentPlaceHolder1_ImageButton1', processCaptchaForShipOnlineUserlogin);
    });
}

function processCaptchaForTestLoginPage(retryCount = 0) {
    if (typeof window.Tesseract === 'undefined') {
        console.error('Tesseract.js is not loaded.');
        return;
    }

    const captchaImage = document.querySelector("#form1 > div:nth-child(12) > div:nth-child(3) > div.row > div:nth-child(1) > div > div.row > div:nth-child(1) > table > tbody > tr > td:nth-child(1) > img");
    const securityCodeInput = document.querySelector('input[id="ContentPlaceHolder1_txtimage"]');
    const proceedButton = document.querySelector('input[id="ContentPlaceHolder1_btn_view"]');

    if (!captchaImage || !securityCodeInput || !proceedButton) {
        console.error('CAPTCHA image, security code input field, or proceed button not found.');
        return;
    }

    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');

    canvas.width = captchaImage.width || 100;
    canvas.height = captchaImage.height || 100;

    context.drawImage(captchaImage, 0, 0);
    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
    const bwImageData = convertToBlackAndWhite(imageData);
    context.putImageData(bwImageData, 0, 0);
    const dataURL = canvas.toDataURL('image/png');

    window.Tesseract.recognize(dataURL, 'eng', {
        logger: info => console.log('OCR Progress:', info)
    })
    .then(({ data: { text } }) => {
        const cleanedText = cleanAndValidateText(text);
        if (cleanedText) {
            const result = evaluateMathExpression(cleanedText);
            if (result !== null) {
                securityCodeInput.value = result;
                proceedButton.click();
                setTimeout(() => processCaptchaForTestLoginPage(0), setRetryDelay());
            } else {
                retryOrReload(retryCount, 'ContentPlaceHolder1_ImageButton', processCaptchaForTestLoginPage);
            }
        } else {
            retryOrReload(retryCount, 'ContentPlaceHolder1_ImageButton', processCaptchaForTestLoginPage);
        }
    })
    .catch(error => {
        console.error('OCR Error:', error);
        retryOrReload(retryCount, 'ContentPlaceHolder1_ImageButton', processCaptchaForTestLoginPage);
    });
}

function processCaptchaForPgRequest(retryCount = 0) {
    if (typeof window.Tesseract === 'undefined') {
        console.error('Tesseract.js is not loaded.');
        return;
    }

    const captchaImage = document.getElementById('imgCaptcha');
    const answerInput = document.getElementById('txtCaptchaAnswer');

    if (!captchaImage || !answerInput) {
        console.error('CAPTCHA image or answer input field not found.');
        return;
    }

    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');

    canvas.width = captchaImage.width || 100;
    canvas.height = captchaImage.height || 100;

    context.drawImage(captchaImage, 0, 0);
    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
    const targetColor = '#808080';
    const updatedImageData = convertColorToWhite(imageData, targetColor);
    context.putImageData(updatedImageData, 0, 0);
    const dataURL = canvas.toDataURL('image/png');

    window.Tesseract.recognize(dataURL, 'eng', {
        logger: info => console.log('OCR Progress:', info)
    })
    .then(({ data: { text } }) => {
        const cleanedText = cleanAndValidateText(text);
        if (cleanedText) {
            const result = evaluateMathExpression(cleanedText);
            if (result !== null) {
                answerInput.value = result;
                document.getElementById('btPayment').click();
            } else {
                console.error('Failed to evaluate mathematical expression.');
            }
        } else {
            retryOrReload(retryCount, 'btnRefreshCaptcha', processCaptchaForPgRequest);
        }
    })
    .catch(error => {
        console.error('OCR Error:', error);
        retryOrReload(retryCount, 'btnRefreshCaptcha', processCaptchaForPgRequest);
    });
}

function main() {
    const url = window.location.href;

    if (url.includes("ship_online_Userlogin.aspx")) {
        processCaptchaForShipOnlineUserlogin();
    } else if (url.includes("Test_LoginPage.aspx")) {
        processCaptchaForTestLoginPage();
    } else if (url.includes("pg_request.aspx")) {
        processCaptchaForPgRequest();
    }
}

main();
